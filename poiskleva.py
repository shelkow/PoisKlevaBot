# -*- coding: utf-8 -*-
#!pip install python-telegram-bot --quiet
#!pip install ephem

# @title PROGNOZZZ KLEVA
from pickle import TRUE
import logging
import requests
import ephem
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import timedelta
import os
from bs4 import BeautifulSoup
import re
from datetime import timedelta
import datetime
import asyncio
import pytz

# üîê –ö–ª—é—á–∏
import os

BOT_TOKEN = os.getenv('BOT_TOKEN')
OWM_API_KEY = os.getenv('OWM_API_KEY')
LOCATION = 'Kaluga,RU'
# üî• –î–∞–≤–ª–µ–Ω–∏–µ –≤—á–µ—Ä–∞ –≤ –ö–∞–ª—É–≥–µ
def get_yesterday_pressure(latitude=54.51, longitude=36.26):
    yesterday = (datetime.datetime.utcnow() - datetime.timedelta(days=1)).date()
    start = yesterday.isoformat()
    end = yesterday.isoformat()
    url = (
        f"https://api.open-meteo.com/v1/forecast?"
        f"latitude={latitude}&longitude={longitude}&"
        f"start_date={start}&end_date={end}&"
        f"hourly=pressure_msl&timezone=Europe/Moscow"
    )
    response = requests.get(url)
    data = response.json()
    pressures = data.get('hourly', {}).get('pressure_msl', [])
    times = data.get('hourly', {}).get('time', [])
    if not pressures or not times:
        return None
    # –ù–∞–π–¥—ë–º –∏–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–∏ 12:00 –ú–°–ö
    try:
        index = times.index(f"{yesterday}T12:00")
        pressure_noon_msk = pressures[index]
        return pressure_noon_msk
    except ValueError:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ 12:00 –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
        # –≤–µ—Ä–Ω—ë–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –¥–µ–Ω—å
        avg_pressure = sum(pressures) / len(pressures)
        return avg_pressure

# üî• –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ—á–∏
def is_day():
        kaluga = ephem.Observer()
        kaluga.lat, kaluga.lon = '54.51', '36.25'
        kaluga.date = ephem.now()

        sunset_prev = kaluga.previous_setting(ephem.Sun()).datetime()
        sunrise_next = kaluga.next_rising(ephem.Sun()).datetime()
        now_utc = datetime.datetime.utcnow()
        if sunset_prev <= now_utc < sunrise_next:
          condition = False
        else:
          condition=True

        return condition
# üî• –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –∏–∑–ª—É—á–µ–Ω–∏–π
def get_kp_index():
    kp_url = "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json"
    try:
        response = requests.get(kp_url)
        data = response.json()
        current_kp_raw = data[-1]['kp']

        base_str = re.findall(r'\d+', current_kp_raw)
        if not base_str:
            return current_kp_raw, "–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å"
        base_val = float(base_str[0])

        if 'M' in current_kp_raw:
            kp_value = base_val + 0.5
        elif '+' in current_kp_raw:
            kp_value = base_val + 0.33
        elif '-' in current_kp_raw:
            kp_value = base_val - 0.33
        else:
            kp_value = base_val

        if kp_value <= 3:
            desc = "–°–ø–æ–∫–æ–π–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ \n –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏."
        elif 4 <= kp_value <= 5:
            desc = "–°–ª–∞–±–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å \n –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ–º–µ—Ö–∏, —Ä—ã–±–∞ –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ."
        elif 6 <= kp_value <= 7:
            desc = "–£–º–µ—Ä–µ–Ω–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è \n –ö–ª—ë–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∞–±—ã–º."
        else:
            desc = "–°–∏–ª—å–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è \n –ü–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è, —Ä—ã–±–∞ –ø–∞—Å—Å–∏–≤–Ω–∞."

        return f"({kp_value:.2f})", desc
    except Exception:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"

# üî• –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–∞ –≤ –ö–∞–ª—É–≥–µ
def get_uv_index(lat=54.51, lon=36.25):
    try:
        tz = pytz.timezone("Europe/Moscow")
        now = datetime.datetime.now(tz).replace(minute=0, second=0, microsecond=0)
        now_iso = now.isoformat()

        url = (
            f"https://api.open-meteo.com/v1/forecast?"
            f"latitude={lat}&longitude={lon}"
            f"&hourly=uv_index"
            f"&timezone=auto"
        )

        response = requests.get(url)
        response.raise_for_status()  # –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—à–∏–±–∫–∏
        data = response.json()

        times = data.get('hourly', {}).get('time', [])
        uvs = data.get('hourly', {}).get('uv_index', [])

        if not times or not uvs:
            return None, "–î–∞–Ω–Ω—ã–µ –ø–æ UV-–∏–Ω–¥–µ–∫—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        # –∏—â–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞
        if now_iso in times:
            index = times.index(now_iso)
            uv_now = uvs[index]
        else:
            uv_now = max(uvs)  # –º–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å

        if uv_now < 2:
            desc = "–ù–∏–∑–∫–∏–π UV-–∏–Ω–¥–µ–∫—Å. –ë–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ —Ä—ã–±–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–∞."
        elif 2 <= uv_now < 5:
            desc = "–£–º–µ—Ä–µ–Ω–Ω—ã–π UV-–∏–Ω–¥–µ–∫—Å. –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏."
        elif 5 <= uv_now < 7:
            desc = "–í—ã—Å–æ–∫–∏–π UV-–∏–Ω–¥–µ–∫—Å. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, —Ä—ã–±–∞ –≤ –∞—Ö—É–µ –∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∞ –¥–Ω–µ."
        elif 7 <= uv_now < 10:
            desc = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π UV-–∏–Ω–¥–µ–∫—Å. –í–æ–∑–º–æ–∂–µ–Ω —Å–æ–ª–Ω–µ—á–Ω—ã–π –æ–∂–æ–≥, —Ä—ã–±–∞ –Ω–∞ –¥–Ω–µ."
        else:
            desc = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π UV-–∏–Ω–¥–µ–∫—Å. –õ—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å —Å–æ–ª–Ω—Ü–∞."

        return uv_now, desc

    except requests.RequestException as e:
        return None, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"


kp_value, kp_desc = get_kp_index()
uv_value, uv_desc = get_uv_index()

# üî• –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã –≤ –ö–∞–ª—É–≥–µ)
def get_water_temp():
    url = "https://seatemperatures.net/asia/russia/oka-river-near-kaluga/"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        # –ò—â–µ–º <p> —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –≤–æ–¥—ã
        temp_tag = soup.find("p", class_="temperature is-size-2 mb-0 has-text-weight-medium")
        if temp_tag:
            temp_text = temp_tag.text.strip()
            temp_value = float(temp_text.replace("¬∞ C", "").strip())
            return temp_value
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã: {e}")
    return None

# üåó üî• –í–ª–∏—è–Ω–∏–µ —Ñ–∞–∑—ã –ª—É–Ω—ã –Ω–∞ —Ä—ã–±–∞–ª–∫—É
def get_moon_phase():
    new_moon = ephem.previous_new_moon(ephem.now())
    moon_age_days = ephem.now() - new_moon  # float

    if moon_age_days < 1:
        phase_name = "üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ ‚ùå "
        score = 0
        max_score = 10
    elif 1 <= moon_age_days < 7:
        phase_name = "üåí –†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ üü°"
        score = 7
        max_score = 10
    elif 7 <= moon_age_days < 8:
        phase_name = "üåì –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å ‚úÖ "
        score = 10
        max_score = 10
    elif 8 <= moon_age_days < 14:
        phase_name = "üåî –ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ üü°"
        score = 7
        max_score = 10
    elif 14 <= moon_age_days < 15:
        phase_name = "üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ ‚ùå"
        score = 0
        max_score = 10
    elif 15 <= moon_age_days < 21:
        phase_name = "üåî –£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ üü°"
        score = 4
        max_score = 10
    elif 21 <= moon_age_days < 22:
        phase_name = "üåó –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å ‚ùå"
        score = 2
        max_score = 10
    elif 22 <= moon_age_days <= 29.53:
        phase_name = "üåò –°—Ç–∞—Ä–∞—è –õ—É–Ω–∞ üü°"
        score = 5
        max_score = 10
    else:
        phase_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞"
        score = 0
        max_score = 10
  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–ª—ë–≤–∞ —Å 18 –ø–æ 22 –¥–µ–Ω—å
    if 18 <= moon_age_days <= 22:
        phase_name += " (–•–æ—Ä–æ—à–∏–π –∫–ª—ë–≤ üëç)"
        score = max(score, 8)  # –ø–æ–≤—ã—à–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–ª—ë–≤–∞
    if 3 <= moon_age_days <= 10:
        phase_name += " (–•–æ—Ä–æ—à–∏–π –∫–ª—ë–≤ üëç)"
        score = max(score, 10)  # –ø–æ–≤—ã—à–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–ª—ë–≤–∞
    return f"{phase_name} {moon_age_days:.2f}", score, max_score

# üî• –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ –ø–æ–≥–æ–¥–µ —Å API
def get_weather():
    url = f"http://api.openweathermap.org/data/2.5/weather?q={LOCATION}&appid={OWM_API_KEY}&units=metric"
    res = requests.get(url).json()
    pressure_hpa = res['main']['pressure']
    pressure_mmhg = round(pressure_hpa / 1.333, 1)
    weather_id = res['weather'][0]['id']

    weather = {
        'temp': res['main']['temp'],
        'pressure': pressure_mmhg,
        'wind_speed': res['wind']['speed'],
        'wind_deg': res['wind']['deg'],
        'desc': res['weather'][0]['description'],
        'clouds': res['clouds']['all'],  # %
        'humidity': res['main']['humidity'],  # ‚Üê –í–ª–∞–∂–Ω–æ—Å—Ç—å
        'weather_id': weather_id

    }

    return weather
# üî• –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
def get_weather_forecast(days_ahead=1):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={LOCATION}&appid={OWM_API_KEY}&units=metric"
    res = requests.get(url).json()
    forecast_list = res.get('list', [])
    # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ú–æ—Å–∫–≤—ã: UTC+3
    MSK_OFFSET = 3
    # –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –≤ –ú–°–ö —Å —É—á—ë—Ç–æ–º days_ahead
    now_utc = datetime.datetime.utcnow()
    now_msk = now_utc + datetime.timedelta(hours=MSK_OFFSET)
    target_date = (now_msk + datetime.timedelta(days=days_ahead)).date()
    for entry in forecast_list:
        dt_txt = entry['dt_txt']  # –≤ UTC, –Ω–∞–ø—Ä–∏–º–µ—Ä "2025-06-21 12:00:00"
        dt_utc = datetime.datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S")
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ú–°–ö
        dt_msk = dt_utc + datetime.timedelta(hours=MSK_OFFSET)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ –ú–°–ö
        #if dt_msk.date() == target_date and dt_msk.hour == 9:
        if dt_msk.date() == target_date and dt_msk.hour == 12:
        #if dt_msk.date() == target_date and dt_msk.hour == 15:
        #if dt_msk.date() == target_date and dt_msk.hour == 18:
        #if dt_msk.date() == target_date and dt_msk.hour == 21:
            pressure_hpa = entry['main']['pressure']
            pressure_mmhg = round(pressure_hpa / 1.333, 1)
            weather = {
                'temp': entry['main']['temp'],
                'pressure': pressure_mmhg,
                'wind_speed': entry['wind']['speed'],
                'wind_deg':  entry['wind']['deg'],
                'desc': entry['weather'][0]['description'],
                'clouds': entry['clouds']['all'],
                'humidity': entry['main']['humidity'],
                'weather_id': entry['weather'][0]['id']
            }
            return weather

    return None  # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
# üî• –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
def wind_deg_to_short(deg):
    directions = [
        "–°", "–°–°–í", "–°–í", "–í–°–í", "–í", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í",
        "–Æ", "–Æ–Æ–ó", "–Æ–ó", "–ó–Æ–ó", "–ó", "–ó–°–ó", "–°–ó", "–°–°–ó"
    ]
    ix = int((deg + 11.25) % 360 / 22.5)
    return directions[ix]
# üî• –ò—Ç–æ–≥–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—á–µ—Ç–∞ –∫–ª–µ–≤–∞
def calculate_klev_score(weather, moon_score,water_temp=None):
    score = moon_score
    details = {}

    # –õ—É–Ω–∞
    moon_max = 10
    details['–õ—É–Ω–∞'] = (moon_score, moon_max)

    pressure_today = weather['pressure'] - 18  # –¢–µ–∫—É—â–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π
    pressure_yesterday = get_yesterday_pressure()  # –§—É–Ω–∫—Ü–∏—è –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –¥–∞–≤–ª–µ–Ω–∏–µ–º –≤—á–µ—Ä–∞
    pressure_yesterday = (pressure_yesterday * 0.75006)-18
    diff = abs(pressure_today - pressure_yesterday)

    if diff > 10:
        pressure_score = 3  # –ü–µ—Ä–µ–ø–∞–¥ –±–æ–ª—å—à–µ 10 –º–º ‚Äî –ø–ª–æ—Ö–æ
    elif 4 < diff <= 10:
        pressure_score = 5  # –ü–µ—Ä–µ–ø–∞–¥ –æ—Ç 5 –¥–æ 10 –º–º ‚Äî —Å—Ä–µ–¥–Ω–µ
    elif 1 < diff <= 5:
        pressure_score = 8  # –ü–µ—Ä–µ–ø–∞–¥ –æ—Ç 2 –¥–æ 5 –º–º ‚Äî –ø–æ—á—Ç–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ
    else:  # diff <= 2
        pressure_score = 10  # –ü–µ—Ä–µ–ø–∞–¥ 0-2 –º–º ‚Äî –æ—Ç–ª–∏—á–Ω–æ, —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ

    details['–î–∞–≤–ª–µ–Ω–∏–µ'] = (pressure_score, 10)
    score += pressure_score

    # –í–µ—Ç–µ—Ä
    wind_score = 0
    wind_speed = weather['wind_speed']  # –≤ –º/—Å
    wind_d = weather['wind_deg']  # –≤ –º/—Å

    wdres=wind_deg_to_short(wind_d)
    windkm = wind_speed * 3.6           # –ø–µ—Ä–µ–≤–æ–¥ –≤ –∫–º/—á

    if windkm < 5:
        wind_score = 7  # –ü–æ—á—Ç–∏ —à—Ç–∏–ª—å ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ
    elif 5 <= windkm < 10:
        wind_score = 10   # –õ—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä ‚Äî —Ö–æ—Ä–æ—à–æ
    elif 10 <= windkm < 15:
        wind_score = 9   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä ‚Äî —Å–Ω–æ—Å–Ω–æ
    elif 15 <= windkm < 20:
        wind_score = 5   # –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä ‚Äî –∫–ª—ë–≤ —É—Ö—É–¥—à–∞–µ—Ç—Å—è
    elif 20 <= windkm < 25:
        wind_score = 3   # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä ‚Äî –ø–ª–æ—Ö–æ
    else:  # 25 –∏ –≤—ã—à–µ
        wind_score = 1   # –®—Ç–æ—Ä–º–æ–≤–æ–π –≤–µ—Ç–µ—Ä ‚Äî –ø–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ

    details['–í–µ—Ç–µ—Ä'] = (wind_score, 10)
    details['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] = wdres

    score += wind_score

    # –û–±–ª–∞—á–Ω–æ—Å—Ç—å —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞—Ç–∞
    cloud_score = 0
    clouds = weather['clouds']

    if is_day():
        cloud_score = 10  # –Ω–æ—á—å—é –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–∞ –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
    else:
        if 50 <= clouds <= 100:
            cloud_score = 10
        elif 30 <= clouds < 50:
            cloud_score = 7
        elif 10 <= clouds < 30:
            cloud_score = 5
        else:
            cloud_score = 1

    details['–û–±–ª–∞—á–Ω–æ—Å—Ç—å'] = (cloud_score, 10)
    score += cloud_score


    # –í–ª–∞–∂–Ω–æ—Å—Ç—å
    humidity_score = 0
    humidity = weather['humidity']

    if 80 <= humidity <= 100:
        humidity_score = 10  # –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    elif 50 <= humidity < 80:
        humidity_score = 8   # –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è
    elif 30 <= humidity < 50:
        humidity_score = 5   # –£–º–µ—Ä–µ–Ω–Ω—ã–µ/–ø–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è
    else:  # humidity <30
        humidity_score = 2   # –°–ª–∏—à–∫–æ–º —Å—É—Ö–æ

    details['–í–ª–∞–∂–Ω–æ—Å—Ç—å'] = (humidity_score, 10)
    score += humidity_score


    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –æ—Ü–µ–Ω–∫–∏ –æ—Å–∞–¥–∫–æ–≤
    precip_score = 0
    weather_id = weather['weather_id']
    print(f"Debug: weather_id = {weather_id}")

    if 200 <= weather_id < 233:
        precip_score = 0
        precip_desc = "–ì—Ä–æ–∑–∞ –∏ –≥—Ä–æ–º"
    elif 300 <= weather_id < 322:
        precip_score = 7
        precip_desc = "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å"
    elif 500 <= weather_id < 532:
        precip_score = 3
        precip_desc = "–î–æ–∂–¥—å"
    elif 600 <= weather_id < 623:
        precip_score = 0
        precip_desc = "–°–Ω–µ–≥"
    elif 701 <= weather_id < 782:
        precip_score = 0
        precip_desc = "–¢—É–º–∞–Ω, –ø–µ—Å–æ–∫, —Ç–æ—Ä–Ω–∞–¥–æ"
    elif 801 <= weather_id < 805:
        precip_score = 10
        precip_desc = "–û–±–ª–∞—á–Ω–æ"
    elif weather_id == 800:
        if is_day():
            precip_score = 10  # –ù–æ—á—å, —á–∏—Å—Ç–æ–µ –Ω–µ–±–æ ‚Äî –æ—Ç–ª–∏—á–Ω–æ
            precip_desc = "–ß–∏—Å—Ç–æ–µ –Ω–µ–±–æ (–Ω–æ—á—å)"
        else:
            precip_score = 6  # –î–µ–Ω—å, —á–∏—Å—Ç–æ–µ –Ω–µ–±–æ ‚Äî –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ
            precip_desc = "–ß–∏—Å—Ç–æ–µ –Ω–µ–±–æ (–¥–µ–Ω—å)"
    else:
        precip_score = 10
        precip_desc = "–ù–µ—Ç –æ—Å–∞–¥–∫–æ–≤ " + str(weather_id)

    details['–û—Å–∞–¥–∫–∏'] = (precip_score, 10, precip_desc)
    score += precip_score

    # –û—Ü–µ–Ω–∫–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤–æ–¥—ã
    water_temp_score = 0
    if water_temp is not None:
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
        if 15 <= water_temp <= 20:
            water_temp_score = 10
        elif 10 <= water_temp < 15 or 20 < water_temp <= 22:
            water_temp_score = 7
        elif 7 <= water_temp < 10 or 22 < water_temp <= 25:
            water_temp_score = 3
        else:
            water_temp_score = 1
    details['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã'] = (water_temp_score, 10)
    score += water_temp_score

    total_score = max(1, min(100, score))
    return total_score, details, precip_desc, precip_score

def get_best_fishing_time():
    kaluga = ephem.Observer()
    kaluga.lat, kaluga.lon = '54.51', '36.25'
    kaluga.date = ephem.now()

    sunrise_utc = kaluga.next_rising(ephem.Sun()).datetime()
    sunset_utc = kaluga.next_setting(ephem.Sun()).datetime()

    # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∞–ª—É–≥–∞ UTC+3)
    UTC_OFFSET = timedelta(hours=3)

    sunrise_local = sunrise_utc + UTC_OFFSET
    sunset_local = sunset_utc + UTC_OFFSET

    morning = f"{(sunrise_local - timedelta(hours=1)).strftime('%H:%M')}‚Äì{(sunrise_local + timedelta(hours=1)).strftime('%H:%M')}"
    evening = f"{(sunset_local - timedelta(hours=1.5)).strftime('%H:%M')}‚Äì{(sunset_local + timedelta(hours=0.5)).strftime('%H:%M')}"

    return morning, evening

def get_klev_rating_text(score, max_score=10):
    if score <= 2:
        return f"–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–π ({score} –∏–∑ {max_score}) üíÄ"
    elif 2 < score <= 4:
        return f"–ü–ª–æ—Ö–æ–π ({score} –∏–∑ {max_score}) üòï"
    elif 4 < score <= 6:
        return f"–°—Ä–µ–¥–Ω–∏–π ({score} –∏–∑ {max_score}) üòê"
    elif 6 < score <= 8:
        return f"–•–æ—Ä–æ—à–∏–π ({score} –∏–∑ {max_score}) üôÇ"
    else :  # >8
        return f"–û—Ç–ª–∏—á–Ω—ã–π ({score} –∏–∑ {max_score}) üòÉ"


async def klev_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE, days_ahead=0):
    if days_ahead == 0:
        weather = get_weather()
    else:
        weather = get_weather_forecast(days_ahead)

    water_temp = get_water_temp()
    moon_desc, moon_score, moon_max = get_moon_phase()
    klev_score, breakdown, precip_desc, precip_score = calculate_klev_score(weather, moon_score, water_temp)
    normalized_klev_score = round(klev_score / 70 * 10, 1)
    morning, evening = get_best_fishing_time()

    precip_score, precip_max, precip_desc = breakdown.get('–û—Å–∞–¥–∫–∏', (0, 10, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))

    def format_points(points, maximum):
        return f"({points} –∏–∑ {maximum})"

    water_temp_str = f"{water_temp}¬∞C" if water_temp is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    reply = (
        f"üìç –ö–∞–ª—É–≥–∞\n"
        f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞ ({'—Å–µ–≥–æ–¥–Ω—è' if days_ahead == 0 else f'—á–µ—Ä–µ–∑ {days_ahead} –¥–Ω.'}): {weather['desc'].capitalize()}, {weather['temp']}¬∞C "
        f"({precip_desc}, {format_points(precip_score, 10)})\n"
        f"üí® –í–µ—Ç–µ—Ä: {weather['wind_speed'] * 3.6:.1f} –∫–º/—á {format_points(*breakdown['–í–µ—Ç–µ—Ä'])}\n"
        f"‚ÜñÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wind_deg_to_short(weather['wind_deg'])}\n"
        f"üìâ –î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure'] - 18:.1f} –º–º —Ä—Ç. —Å—Ç. {format_points(*breakdown['–î–∞–≤–ª–µ–Ω–∏–µ'])}\n"
        f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather['clouds']}% {format_points(*breakdown['–û–±–ª–∞—á–Ω–æ—Å—Ç—å'])}\n"
        f"{moon_desc} {format_points(*breakdown['–õ—É–Ω–∞'])}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}% {format_points(*breakdown['–í–ª–∞–∂–Ω–æ—Å—Ç—å'])}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {water_temp_str} {format_points(*breakdown['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã'])}\n"
        f"üåç –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (Kp): {(kp_value)}\n {kp_desc}\n"
        f"‚òÄÔ∏è UV-–∏–Ω–¥–µ–∫—Å: {uv_value}\n {uv_desc}\n\n"
        f"üé£ –ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞: {get_klev_rating_text(normalized_klev_score)}\n"
        f"üïì –õ—É—á—à–µ–µ –≤—Ä–µ–º—è:\n –£—Ç—Ä–æ {morning} \n –í–µ—á–µ—Ä {evening}"
    )
    await update.message.reply_text(reply)
# üîÅ /klev ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def klev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await klev_forecast(update, context, days_ahead=0)

# üîÅ /klev_zavtra ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
async def klev_zavtra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await klev_forecast(update, context, days_ahead=1)

# üîÅ /klev_poslezavtra ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
async def klev_poslezavtra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await klev_forecast(update, context, days_ahead=2)

# üîÅ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /klev —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ –≤ –ö–∞–ª—É–≥–µ üé£")

# üõë /stop
#async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
#    await update.message.reply_text("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
#    os._exit(0)  # –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
# üëá –ó–∞–ø—É—Å–∫


async def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("klev", klev))
    app.add_handler(CommandHandler("klev_zavtra", klev_zavtra))
    app.add_handler(CommandHandler("klev_poslezavtra", klev_poslezavtra))
    #app.add_handler(CommandHandler("stop", stop))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

# ‚úÖ –í—ã–∑–æ–≤
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
